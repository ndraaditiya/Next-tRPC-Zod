import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { trpc } from '@/utils/trpc'
import { useState } from 'react'

export default function Home() {
  const [todoName, setTodoName] = useState('')
  const hello = trpc.hello.useQuery({ text: 'Client' })
  const todos = trpc.todos.all.useQuery()
  const todo = trpc.todos.byId.useQuery('1')
  const create = trpc.todos.create.useMutation()
  const deleteTodo = trpc.todos.delete.useMutation()
  const updateTodo = trpc.todos.update.useMutation()

  const AddTodo = () => {
    create.mutate({ todoName })
    // mutation.isSuccess && setTodoName('')

    // tRPC isnt support auto refetch yet, so i reload the page for load new data todos
    // for auto refetch, you can use tRPC with react-query
    window.location.reload()
  }

  const handleUpdateTodo = (id: string, valueComplete: boolean) => {
    updateTodo.mutate({ id, isComplete: !valueComplete })
    window.location.reload()
  }

  const handleDelete = (id: string) => {
    deleteTodo.mutate({ id })
    window.location.reload()
  }

  return (
    <>
      <Head>
        <title>Todo App with tRPC-Zod</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <p>Get data from route hello: <span style={{ fontWeight: 'bold' }}>{hello?.data?.greeting}</span></p>
        <br />
        <p>Get data from route todos.byId: <span style={{ fontWeight: 'bold' }}>{todo?.data?.todoName}</span></p>
        <br />
        <p>Get data from route todos.all:</p>
        {todos.isLoading ? (
          <p>Loading..</p>
        ) : (
          <div className={styles.container}>
            {todos.data && todos.data.map(({ todoName, isComplete, id }, i) => (
              <div key={i}>
                <span style={{ textDecoration: isComplete ? 'line-through' : 'none', marginRight: 30 }}>{todoName}</span>
                <span>
                  <input type='checkbox' checked={isComplete ? true : false} onChange={() => handleUpdateTodo(id, isComplete)} />
                  <button onClick={() => handleDelete(id)} className={styles.btnDel}>
                    delete
                  </button>
                </span>
              </div>
            ))}
          </div>
        )}
        < br />
        <div className={styles.formInput}>
          <input type='text' placeholder='todo Name' value={todoName} onChange={(e) => setTodoName(e.target.value)} />
          <button onClick={AddTodo}>Add Todo</button>
        </div>
      </main>
    </>
  )
}
